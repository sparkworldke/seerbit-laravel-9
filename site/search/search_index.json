{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction This SDK enables direct and structured interction with SeerBit API Once installed you can easily configure the SDK by providing your credentials in your environment file configuration. For full documentation of SeerBit visit mkdocs.org . Requirements This package can be used with Laravel 5.8 or higher PHP 7.1 or higher Installation The preferred method is via composer . Follow the composer installation instructions if you do not already have composer installed. Once composer is installed, execute the following command in your project root to install this library: composer require seerbit/seerbit-laravel The service provider will automatically register itself. You can publish the config file with: php artisan vendor:publish --provider=\"SeerbitLaravel\\SeerbitServiceProvider\" --tag=\"config\" This is the contents of the config file that will be published to your app's directory path config/seerbit.php : return [ 'environment' => env('SEERBIT_ENVIRONMENT', \\Seerbit\\Environment::LIVE), 'public_key' => env('SEERBIT_PUBLIC_KEY'), 'secret_key' => env('SEERBIT_SECRET_KEY'), 'token' => env('SEERBIT_TOKEN'), ]; You can find both public and secret keys from your merchant dashboard. The token can be generated following the guides here Replace them by changes the key values in your .env file. SEERBIT_ENVIRONMENT=\"public_key\" Clear your config cache and restart the server after installation to ensure your config will be loaded. If you\u2019ve been caching configurations locally, clear your config cache with either of these commands: php artisan optimize:clear # or php artisan config:clear Usage Import the namespace: use SeerbitLaravel\\Facades\\Seerbit;","title":"Home"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#this-sdk-enables-direct-and-structured-interction-with-seerbit-api","text":"Once installed you can easily configure the SDK by providing your credentials in your environment file configuration. For full documentation of SeerBit visit mkdocs.org .","title":"This SDK enables direct and structured interction with SeerBit API"},{"location":"#requirements","text":"This package can be used with Laravel 5.8 or higher PHP 7.1 or higher","title":"Requirements"},{"location":"#installation","text":"The preferred method is via composer . Follow the composer installation instructions if you do not already have composer installed. Once composer is installed, execute the following command in your project root to install this library: composer require seerbit/seerbit-laravel The service provider will automatically register itself. You can publish the config file with: php artisan vendor:publish --provider=\"SeerbitLaravel\\SeerbitServiceProvider\" --tag=\"config\" This is the contents of the config file that will be published to your app's directory path config/seerbit.php : return [ 'environment' => env('SEERBIT_ENVIRONMENT', \\Seerbit\\Environment::LIVE), 'public_key' => env('SEERBIT_PUBLIC_KEY'), 'secret_key' => env('SEERBIT_SECRET_KEY'), 'token' => env('SEERBIT_TOKEN'), ];","title":"Installation"},{"location":"#_1","text":"You can find both public and secret keys from your merchant dashboard. The token can be generated following the guides here Replace them by changes the key values in your .env file. SEERBIT_ENVIRONMENT=\"public_key\"","title":""},{"location":"#_2","text":"Clear your config cache and restart the server after installation to ensure your config will be loaded. If you\u2019ve been caching configurations locally, clear your config cache with either of these commands: php artisan optimize:clear # or php artisan config:clear","title":""},{"location":"#usage","text":"Import the namespace: use SeerbitLaravel\\Facades\\Seerbit;","title":"Usage"},{"location":"account/","text":"This service provides access to making secure transactions by collecting the shoppers bank account details and process the payment. Authorize try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"amount\" => \"1000.00\", \"accountName\" => \"Customer Bank Account Name\", \"accountNumber\" => \"1234567890\", \"bankCode\" => \"033\", \"currency\" => \"NGN\", \"country\" => \"NG\", \"email\" => \"customer@email.com\" , \"paymentReference\" => $transaction_ref ]; $trans = SeerBit::Account()->Authorize($payload); }catch (\\Exception $e){ } Banks List try{ $trans = SeerBit::Resources()->Banks(); }catch (\\Exception $e){ }","title":"Account"},{"location":"account/#authorize","text":"try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"amount\" => \"1000.00\", \"accountName\" => \"Customer Bank Account Name\", \"accountNumber\" => \"1234567890\", \"bankCode\" => \"033\", \"currency\" => \"NGN\", \"country\" => \"NG\", \"email\" => \"customer@email.com\" , \"paymentReference\" => $transaction_ref ]; $trans = SeerBit::Account()->Authorize($payload); }catch (\\Exception $e){ }","title":"Authorize"},{"location":"account/#banks-list","text":"try{ $trans = SeerBit::Resources()->Banks(); }catch (\\Exception $e){ }","title":"Banks List"},{"location":"card/","text":"This service provides access to making secure transactions by collecting the shoppers card details and process payment using pre-authentication approach and immediate charge. Authorize One Time Authorize and Tokenize a transaction before capturing. The card will be tokenized automatically after a successful transaction. try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"currency\" => \"KES\", \"country\" => \"KE\", \"cardNumber\" => \"5123450000000008\", \"expiryMonth\" => \"06\", \"expiryYear\" => \"21\", \"amount\" => \"100.00\", \"cvv\" => \"100\", \"email\" => \"anonshopper@gmail.com\", \"fullName\" => \"Anonymous Shopper\", \"paymentReference\" => $transaction_ref ]; $trans = SeerBit::Card()->AuthorizeOnetime($payload); }catch (\\Exception $e){ } Authorize With Token Authorize a transaction with a customer token before capturing try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"currency\" => \"KES\", \"country\" => \"KE\", \"cardToken\" => \"tk_1d67fb8a-ee8f-4fad-80e7-c30d2d\", \"amount\" => \"100.00\", \"email\" => \"anonshopper@gmail.com\", \"fullName\" => \"Anonymous Shopper\", \"paymentReference\" => $transaction_ref ]; $trans = SeerBit::Card()->AuthorizeWithToken($payload); }catch (\\Exception $e){ } Captutue Capture an authorized transaction try{ $payload = [ \"currency\" => \"KES\", \"country\" => \"KE\", \"amount\" => \"100.00\", \"paymentReference\" => \"captured_transaction_reference\" ]; $trans = SeerBit::Card()->Capture($payload); }catch (\\Exception $e){ } Cancel Cancel an authorized transaction try{ $payload = [ \"currency\" => \"KES\", \"country\" => \"KE\", \"amount\" => \"100.00\", \"paymentReference\" => \"captured_transaction_reference\" ]; $trans = SeerBit::Card()->Cancel($payload); }catch (\\Exception $e){ } Refund Refund an authorized transaction try{ $payload = [ \"currency\" => \"KES\", \"country\" => \"KE\", \"amount\" => \"100.00\", \"paymentReference\" => \"captured_transaction_reference\" ]; $trans = SeerBit::Card()->Refund($payload); }catch (\\Exception $e){ } Tokenize Tokenize customer's card try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"fullName\" => \"Victor Ighalo\", \"currency\" => \"KES\", \"country\" => \"KE\", \"cardNumber\" => \"5123450000000008\", \"expiryMonth\" => \"06\", \"expiryYear\" => \"21\", \"paymentReference\" => $transaction_ref ]; $trans = SeerBit::Card()->Tokenize($payload); }catch (\\Exception $e){ } Non 3DS Direct Debit plus tokenization Debit a customer's card without 3DS authentication process. The card will be tokenized automatically after a successful transaction. try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"fullName\" => \"Victor Ighalo\", \"currency\" => \"KES\", \"country\" => \"KE\", \"cardNumber\" => \"5123450000000008\", \"expiryMonth\" => \"06\", \"expiryYear\" => \"21\", \"paymentReference\" => $transaction_ref ]; $trans = SeerBit::Card()->Non3DSOneTime($payload); }catch (\\Exception $e){ } Non 3DS Direct Debit with token Debit a customer's card without 3DS authentication process. try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"amount\" => \"1000.00\", \"fullName\" => \"john doe\", \"currency\" => \"NGN\", \"country\" => \"NG\", \"email\" => \"johndoe@gmail.com\", \"cardToken\" => \"tk_e4cae021-e2ce-4b59-9b1e-3f859cefd\" ]; $trans = SeerBit::Card()->Non3DSWithToken($payload); }catch (\\Exception $e){ }","title":"Card"},{"location":"card/#authorize-one-time","text":"Authorize and Tokenize a transaction before capturing. The card will be tokenized automatically after a successful transaction. try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"currency\" => \"KES\", \"country\" => \"KE\", \"cardNumber\" => \"5123450000000008\", \"expiryMonth\" => \"06\", \"expiryYear\" => \"21\", \"amount\" => \"100.00\", \"cvv\" => \"100\", \"email\" => \"anonshopper@gmail.com\", \"fullName\" => \"Anonymous Shopper\", \"paymentReference\" => $transaction_ref ]; $trans = SeerBit::Card()->AuthorizeOnetime($payload); }catch (\\Exception $e){ }","title":"Authorize One Time"},{"location":"card/#authorize-with-token","text":"Authorize a transaction with a customer token before capturing try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"currency\" => \"KES\", \"country\" => \"KE\", \"cardToken\" => \"tk_1d67fb8a-ee8f-4fad-80e7-c30d2d\", \"amount\" => \"100.00\", \"email\" => \"anonshopper@gmail.com\", \"fullName\" => \"Anonymous Shopper\", \"paymentReference\" => $transaction_ref ]; $trans = SeerBit::Card()->AuthorizeWithToken($payload); }catch (\\Exception $e){ }","title":"Authorize With Token"},{"location":"card/#captutue","text":"Capture an authorized transaction try{ $payload = [ \"currency\" => \"KES\", \"country\" => \"KE\", \"amount\" => \"100.00\", \"paymentReference\" => \"captured_transaction_reference\" ]; $trans = SeerBit::Card()->Capture($payload); }catch (\\Exception $e){ }","title":"Captutue"},{"location":"card/#cancel","text":"Cancel an authorized transaction try{ $payload = [ \"currency\" => \"KES\", \"country\" => \"KE\", \"amount\" => \"100.00\", \"paymentReference\" => \"captured_transaction_reference\" ]; $trans = SeerBit::Card()->Cancel($payload); }catch (\\Exception $e){ }","title":"Cancel"},{"location":"card/#refund","text":"Refund an authorized transaction try{ $payload = [ \"currency\" => \"KES\", \"country\" => \"KE\", \"amount\" => \"100.00\", \"paymentReference\" => \"captured_transaction_reference\" ]; $trans = SeerBit::Card()->Refund($payload); }catch (\\Exception $e){ }","title":"Refund"},{"location":"card/#tokenize","text":"Tokenize customer's card try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"fullName\" => \"Victor Ighalo\", \"currency\" => \"KES\", \"country\" => \"KE\", \"cardNumber\" => \"5123450000000008\", \"expiryMonth\" => \"06\", \"expiryYear\" => \"21\", \"paymentReference\" => $transaction_ref ]; $trans = SeerBit::Card()->Tokenize($payload); }catch (\\Exception $e){ }","title":"Tokenize"},{"location":"card/#non-3ds-direct-debit-plus-tokenization","text":"Debit a customer's card without 3DS authentication process. The card will be tokenized automatically after a successful transaction. try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"fullName\" => \"Victor Ighalo\", \"currency\" => \"KES\", \"country\" => \"KE\", \"cardNumber\" => \"5123450000000008\", \"expiryMonth\" => \"06\", \"expiryYear\" => \"21\", \"paymentReference\" => $transaction_ref ]; $trans = SeerBit::Card()->Non3DSOneTime($payload); }catch (\\Exception $e){ }","title":"Non 3DS Direct Debit plus tokenization"},{"location":"card/#non-3ds-direct-debit-with-token","text":"Debit a customer's card without 3DS authentication process. try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"amount\" => \"1000.00\", \"fullName\" => \"john doe\", \"currency\" => \"NGN\", \"country\" => \"NG\", \"email\" => \"johndoe@gmail.com\", \"cardToken\" => \"tk_e4cae021-e2ce-4b59-9b1e-3f859cefd\" ]; $trans = SeerBit::Card()->Non3DSWithToken($payload); }catch (\\Exception $e){ }","title":"Non 3DS Direct Debit with token"},{"location":"mobile_money/","text":"This service provides access to making secure transactions through mobile mney channels. It is an e-wallet payment method in Africa which allows you to accept payments from your customers with their mobile money wallets. Authorize try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"fullName\" => \"john doe\", \"email\" => \"johndoe@gmail.com\", \"mobileNumber\" => \"08022343345\", \"currency\" => \"GHS\", \"country\" => \"GH\", \"network\" => \"MTN\", \"amount\" => \"10.01\", \"paymentType\" => \"MOMO\", \"paymentReference\" => $transaction_ref ]; $trans = SeerBit::Momo()->Authorize($payload); }catch (\\Exception $e){ } Networks A list of available mobile money payment networks try{ $trans = SeerBit::Momo()->Networks(); }catch (\\Exception $e){ }","title":"Mobile money"},{"location":"mobile_money/#authorize","text":"try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"fullName\" => \"john doe\", \"email\" => \"johndoe@gmail.com\", \"mobileNumber\" => \"08022343345\", \"currency\" => \"GHS\", \"country\" => \"GH\", \"network\" => \"MTN\", \"amount\" => \"10.01\", \"paymentType\" => \"MOMO\", \"paymentReference\" => $transaction_ref ]; $trans = SeerBit::Momo()->Authorize($payload); }catch (\\Exception $e){ }","title":"Authorize"},{"location":"mobile_money/#networks","text":"A list of available mobile money payment networks try{ $trans = SeerBit::Momo()->Networks(); }catch (\\Exception $e){ }","title":"Networks"},{"location":"order/","text":"Order objects are created to handle purchases of previously defined products. You can create and pay for bulk orders. Create Create an order try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"email\" => \"customer@email.com\", \"fullName\" => \"John Doe\", \"orderType\" => \"BULK_BULK\", \"callbackUrl\" => \"https://yourdomain.com\", \"country\" => \"NG\", \"currency\" => \"NGN\", \"amount\" => \"1400\", \"paymentReference\" => $transaction_ref \"orders\" => [ [ \"orderId\" => \"22S789420214623\", \"currency\" => \"NGN\", \"amount\" => \"500.00\", \"productId\" => \"fruits\", \"productDescription\" => \"mango\" ], [ \"orderId\" => \"1a3sa82748272556947\", \"currency\" => \"NGN\", \"amount\" => \"900.00\", \"productId\" => \"fruits\", \"productDescription\" => \"orange\" ] ] ]; $trans = SeerBit::Order()->Create($payload); }catch (\\Exception $e){ }","title":"Order"},{"location":"order/#create","text":"Create an order try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"email\" => \"customer@email.com\", \"fullName\" => \"John Doe\", \"orderType\" => \"BULK_BULK\", \"callbackUrl\" => \"https://yourdomain.com\", \"country\" => \"NG\", \"currency\" => \"NGN\", \"amount\" => \"1400\", \"paymentReference\" => $transaction_ref \"orders\" => [ [ \"orderId\" => \"22S789420214623\", \"currency\" => \"NGN\", \"amount\" => \"500.00\", \"productId\" => \"fruits\", \"productDescription\" => \"mango\" ], [ \"orderId\" => \"1a3sa82748272556947\", \"currency\" => \"NGN\", \"amount\" => \"900.00\", \"productId\" => \"fruits\", \"productDescription\" => \"orange\" ] ] ]; $trans = SeerBit::Order()->Create($payload); }catch (\\Exception $e){ }","title":"Create"},{"location":"recurrent/","text":"Recurring payments are scheduled payments to pay for products or services that require payments on a regular basis. For example, a cardholder paying an on-demand movie or music streaming provider's subcription fee either weekly, monthly or annually. Create Create a subscription try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"cardNumber\" => \"2223000000000007\", \"expiryMonth\" => \"05\", \"callbackUrl\" => \"https://callback.url.com\", \"expiryYear\" => \"21\", \"cvv\" => \"100\", \"amount\" => \"20\", \"currency\" => \"NGN\", \"productDescription\" => \"Medium HM\", \"productId\" => \"mhmo\", \"country\" => \"NG\", \"startDate\" => \"2019-01-11\", \"cardName\" => \"Bola Olat\", \"billingCycle\" => \"DAILY\", \"email\" => \"customer@email.com\", \"customerId\" => \"199721652416534\", \"billingPeriod\" => \"4\", \"paymentReference\" => $transaction_ref ]; SeerBit::Recurrent()->CreateSubscription($payload); }catch (\\Exception $e){ } Charge Charge a subscription try{ $payload = [ \"amount\" => \"20\", \"currency\" => \"NGN\", \"email\" => \"customer@email.com\", \"paymentReference\" => \"REF_USED_TO_CREATE_A_SUBSCRIPTION\", \"authorizationCode\" => \"54570064E849\" ]; SeerBit::Recurrent()->ChargeSubscription($payload); }catch (\\Exception $e){ } Get all Subscriptions list try{ SeerBit::Recurrent()->GetMerchantSubscription(); }catch (\\Exception $e){ } Get Customer subscription try{ SeerBit::Recurrent()->GetCustomerSubscription($customerId); }catch (\\Exception $e){ } Update a subscription try{ $payload = [ \"amount\" => \"20\", \"currency\" => \"NGN\", \"country\" => \"NG\", \"status\" => \"INACTIVE\", \"email\" => \"customer@email.com\", \"billingId\" => \"199721652416534\", \"mobileNumber\" => \"09339993322\" ]; SeerBit::Recurrent()->UpdateSubscription($payload); }catch (\\Exception $e){ } Validate subscription status try{ //billingId is gotten from a subscription SeerBit::Recurrent()->ValidateStatus($billingId); }catch (\\Exception $e){ }","title":"Recurrent"},{"location":"recurrent/#create","text":"Create a subscription try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"cardNumber\" => \"2223000000000007\", \"expiryMonth\" => \"05\", \"callbackUrl\" => \"https://callback.url.com\", \"expiryYear\" => \"21\", \"cvv\" => \"100\", \"amount\" => \"20\", \"currency\" => \"NGN\", \"productDescription\" => \"Medium HM\", \"productId\" => \"mhmo\", \"country\" => \"NG\", \"startDate\" => \"2019-01-11\", \"cardName\" => \"Bola Olat\", \"billingCycle\" => \"DAILY\", \"email\" => \"customer@email.com\", \"customerId\" => \"199721652416534\", \"billingPeriod\" => \"4\", \"paymentReference\" => $transaction_ref ]; SeerBit::Recurrent()->CreateSubscription($payload); }catch (\\Exception $e){ }","title":"Create"},{"location":"recurrent/#charge","text":"Charge a subscription try{ $payload = [ \"amount\" => \"20\", \"currency\" => \"NGN\", \"email\" => \"customer@email.com\", \"paymentReference\" => \"REF_USED_TO_CREATE_A_SUBSCRIPTION\", \"authorizationCode\" => \"54570064E849\" ]; SeerBit::Recurrent()->ChargeSubscription($payload); }catch (\\Exception $e){ }","title":"Charge"},{"location":"recurrent/#get-all-subscriptions-list","text":"try{ SeerBit::Recurrent()->GetMerchantSubscription(); }catch (\\Exception $e){ }","title":"Get all Subscriptions list"},{"location":"recurrent/#get-customer-subscription","text":"try{ SeerBit::Recurrent()->GetCustomerSubscription($customerId); }catch (\\Exception $e){ }","title":"Get Customer subscription"},{"location":"recurrent/#update-a-subscription","text":"try{ $payload = [ \"amount\" => \"20\", \"currency\" => \"NGN\", \"country\" => \"NG\", \"status\" => \"INACTIVE\", \"email\" => \"customer@email.com\", \"billingId\" => \"199721652416534\", \"mobileNumber\" => \"09339993322\" ]; SeerBit::Recurrent()->UpdateSubscription($payload); }catch (\\Exception $e){ }","title":"Update a subscription"},{"location":"recurrent/#validate-subscription-status","text":"try{ //billingId is gotten from a subscription SeerBit::Recurrent()->ValidateStatus($billingId); }catch (\\Exception $e){ }","title":"Validate subscription status"},{"location":"standard/","text":"This service provides access to making secure transactions by generating a checkout link. With the link, you can then decide to redirect automatically or allow your shoppers to click a button before redirecting. Add the NameSpace: SeerbitLaravel\\Facades\\Seerbit to your Class or Controller or Route in case you want to use the Facade. Initialize transaction namespace App\\Http\\Controllers; use SeerbitLaravel\\Facades\\Seerbit; class Standard { public function Checkout(){ try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"amount\" => \"1000\", \"callbackUrl\" => \"http:yourwebsite.com\", \"country\" => \"NG\", \"currency\" => \"NGN\", \"email\" => \"customer@email.com\", \"paymentReference\" => $transaction_ref, \"productDescription\" => \"product_description\", \"productId\" => \"64310880-2708933-427\" ]; $trans = seerbit()->Standard()->Initialize($payload); // or $trans = SeerBit::Standard()->Initialize($payload); response()->redirectTo(trans->data->payments->redirectLink); }catch (\\Exception $e){ } } } Validate transaction namespace App\\Http\\Controllers; use SeerbitLaravel\\Facades\\Seerbit; class Standard { public function Validate($trans_ref){ try{ $response = SeerBit::Standard()->ValidateStatus($trans_ref); }catch (\\Exception $e){ } } }","title":"Standard"},{"location":"standard/#initialize-transaction","text":"namespace App\\Http\\Controllers; use SeerbitLaravel\\Facades\\Seerbit; class Standard { public function Checkout(){ try{ $uuid = bin2hex(random_bytes(6)); $transaction_ref = strtoupper(trim($uuid)); $payload = [ \"amount\" => \"1000\", \"callbackUrl\" => \"http:yourwebsite.com\", \"country\" => \"NG\", \"currency\" => \"NGN\", \"email\" => \"customer@email.com\", \"paymentReference\" => $transaction_ref, \"productDescription\" => \"product_description\", \"productId\" => \"64310880-2708933-427\" ]; $trans = seerbit()->Standard()->Initialize($payload); // or $trans = SeerBit::Standard()->Initialize($payload); response()->redirectTo(trans->data->payments->redirectLink); }catch (\\Exception $e){ } } }","title":"Initialize transaction"},{"location":"standard/#validate-transaction","text":"namespace App\\Http\\Controllers; use SeerbitLaravel\\Facades\\Seerbit; class Standard { public function Validate($trans_ref){ try{ $response = SeerBit::Standard()->ValidateStatus($trans_ref); }catch (\\Exception $e){ } } }","title":"Validate transaction"}]}